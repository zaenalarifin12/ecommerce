basePath: /
definitions:
  domain.ErrorResponse:
    properties:
      error:
        properties:
          code:
            type: integer
          detail: {}
          message:
            type: string
        type: object
    type: object
  productDto.ProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        minimum: 1000
        type: number
      quantity:
        minimum: 1
        type: integer
    required:
    - price
    - quantity
    type: object
  productDto.ProductResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  productDto.ProductUpdateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        minimum: 1000
        type: number
      quantity:
        minimum: 1
        type: integer
    required:
    - price
    - quantity
    type: object
  utils.RespondWithDataJSONSwagger:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:5001
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Product Service API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: List all products or filter by product IDs
      parameters:
      - collectionFormat: csv
        description: Product IDs to filter by
        in: query
        items:
          type: string
        name: product_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.RespondWithDataJSONSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all products or filter by product IDs
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/productDto.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.RespondWithDataJSONSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/productDto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update product detail by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/productDto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.RespondWithDataJSONSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product detail by ID
      tags:
      - Products
  /products/{uuid}:
    get:
      consumes:
      - application/json
      description: Product Detail by ID
      parameters:
      - description: Product UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.RespondWithDataJSONSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Product Detail by ID
      tags:
      - Products
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
